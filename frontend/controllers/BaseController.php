<?php

namespace frontend\controllers;

use Yii;
use yii\web\Response;
use yii\web\Controller;
use yii\filters\Cors;
use yii\helpers\Json;
use yii\helpers\ArrayHelper;
use common\logic\UcenterLogic;
use common\traits\Redis;

/**
 * Class BaseController
 *  基础的控制器,所有的api 控制器必须基础该基础控制器
 *  其中的publicParam 和 privateParam 公共参数和私有参数，不能再子类控制器中修改
 *
 * @package frontend\controllers
 *
 * @property array $publicParam 公共请求的参数
 * @property array $privateParam 接口需要的请求参数
 */
class BaseController extends Controller
{

    use Redis;

    /**
     * @var bool 关闭csrf 验证
     */
    public $enableCsrfValidation = false;

    /**
     * @var array 定义公共的参数（基本参数）
     */
    protected $publicParam = [
        'versionCode' => 1,     // 版本号 code
        'versionName' => '',    // 版本名称
        'platform' => '',       // 平台 - pc m站  android  ios 等
        'token' => '',          // 登录token - 未登录的话 传空字符串
        'uid' => '',            // 用户uid
    ];

    /**
     * @var array 定义私有参数，接口传递参数
     */
    protected $privateParam = [];

    /**
     * @var array 响应返回的json 数据格式
     */
    protected $arrJson = [
        'errCode' => 1001, // 默认参数格式存在问题
        'errMsg' => '',
        'data' => null,
    ];

    /**
     * @return array 定义行为
     */
    public function behaviors()
    {
        return [
            // 允许跨域
            'corsFilter' => [
                'class' => Cors::className(),
                'cors' => [
                    'Origin' => ['*'],
                    'Access-Control-Request-Method' => ['POST', 'GET'],
                    'Access-Control-Request-Headers' => ['*'],
                    'Access-Control-Allow-Credentials' => true,
                ],
            ],

            // 所有请求必须使用POST 请求
        ];
    }

    /**
     * 所有请求控制器之前的请求操作
     *
     * @param \yii\base\Action $action
     * @return bool
     */
    public function beforeAction($action)
    {
        $this->initInputParam();
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * 初始化请求参数
     */
    private function initInputParam()
    {
        $request = Yii::$app->request;
        $strPublic = $request->post('publicParam');
        $strPrivate = $request->post('privateParam');
        $this->publicParam = array_merge($this->publicParam, (array)Json::decode($strPublic));
        $this->privateParam = (array)Json::decode($strPrivate);
    }

    /**
     * 验证是否已经登陆
     *
     * @return bool
     */
    protected function checkLogin()
    {
        $isReturn = false;
        $uid = ArrayHelper::getValue($this->publicParam, 'uid');
        $token = ArrayHelper::getValue($this->publicParam, 'token');
        if ($uid && $token) {
            // 拼接key
            $key = 'uid:' . $uid . ':token:' . $token;

            // "token": "be025c89d4c03acd7046c925e25bd337",
            // "uid": 89220
            $userInfo = $this->getCache($key);

            if (!$userInfo) {
                // 缓存无效 去用户中心查询
                if (!UcenterLogic::instance()->checkLogin($uid, $token)) {

                } else {
                    $userInfo = [];
                    // 缓存有效时间10分钟
                    $this->setCacheTime($key, $userInfo, Yii::$app->params['apiUserTokenTime']);
                }
            } else {
                $isReturn = true;
            }
        }

        return $isReturn;
    }

    /**
     * 格式分页参数
     *
     * @param integer $intPage 第几页
     * @param int $intPageSize 每页多少条
     * @param int $intTotal 数据总条数
     * @return array
     */
    protected function formatPages($intPage, $intPageSize, $intTotal)
    {
        return [
            'currentPage' => intval($intPage),
            'pageSize' => intval($intPageSize),
            'totalCount' => intval($intTotal),
        ];
    }

    /**
     * 格式化分页数据
     *
     * @param array $array 数据信息
     * @param int $intPage 当前页
     * @param int $intPageSize 每页条数
     * @param int $intTotal 总数据条数
     * @return array
     */
    protected function formatPageLists($array, $intPage, $intPageSize, $intTotal)
    {
        return [
            'pages' => $this->formatPages($intPage, $intPageSize, $intTotal),
            'lists' => $array
        ];
    }

    /**
     * 响应ajax 返回
     * @param string $array 其他返回参数(默认null)
     * @return mixed|string
     */
    protected function returnJson($array = null)
    {
        // 判断是否覆盖之前的值
        if ($array) $this->arrJson = array_merge($this->arrJson, $array);

        // 没有错误信息使用code 确定错误信息
        if (empty($this->arrJson['errMsg'])) {
            $arrErrorInfo = ArrayHelper::getValue(Yii::$app->params, 'arrApiErrorInfo');
            if (isset($arrErrorInfo[$this->arrJson['errCode']])) {
                $this->arrJson['errMsg'] = $arrErrorInfo[$this->arrJson['errCode']];
            }
        }

        // 可以记录日志信息

        // 设置JSON返回
        Yii::$app->response->format = Response::FORMAT_JSON;
        return $this->arrJson;
    }

    /**
     * handleJson() 处理返回数据
     * @param mixed $data 返回数据
     * @param integer $errCode 返回状态码
     * @param null $errMsg 提示信息
     */
    protected function handleJson($data, $errCode = 0, $errMsg = null)
    {
        $this->arrJson['errCode'] = $errCode;
        $this->arrJson['data'] = $data;
        if ($errMsg !== null) {
            $this->arrJson['errMsg'] = $errMsg;
        }
    }
}

