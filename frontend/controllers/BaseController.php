<?php

namespace frontend\controllers;

use Yii;
use yii\web\Controller;
use yii\filters\Cors;
use yii\helpers\ArrayHelper;
use common\logic\UcenterLogic;

/**
 * Class BaseController
 *  基础的控制器,所有的api 控制器必须基础该基础控制器
 *  其中的publicParam 和 privateParam 公共参数和私有参数，不能再子类控制器中修改
 *
 * @package frontend\controllers
 *
 * @property array $publicParam 公共请求的参数
 * @property array $privateParam 接口需要的请求参数
 */
class BaseController extends Controller
{
    /**
     * @var bool 关闭csrf 验证
     */
    public $enableCsrfValidation = false;

    /**
     * @var array 定义公共的参数（基本参数）
     */
    protected $publicParam = [
        'versionCode' => 1,     // 版本号 code
        'versionName' => '',    // 版本名称
        'platform' => '',       // 平台 - pc m站  android  ios 等
        'token' => '',          // 登录token - 未登录的话 传空字符串
        'uid' => '',            // 用户uid
    ];

    /**
     * @var array 定义私有参数，接口传递参数
     */
    protected $privateParam = [];


    /**
     * @return array 定义行为
     */
    public function behaviors()
    {
        return [
            // 允许跨域
            'corsFilter' => [
                'class' => Cors::className(),
                'cors' => [
                    'Origin' => ['*'],
                    'Access-Control-Request-Method' => ['POST', 'GET'],
                    'Access-Control-Request-Headers' => ['*'],
                    'Access-Control-Allow-Credentials' => true,
                ],
            ],

            // 所有请求必须使用POST 请求
        ];
    }

    public function beforeAction($action)
    {
        $this->initInputParam();
        $this->checkLogin();
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }


    private function initInputParam()
    {
        $publicJson = Yii::$app->request->post('publicParam');
        $privateJson = Yii::$app->request->post('privateParam');
        $this->publicParam = array_merge($this->publicParam, (array)json_decode($publicJson, true));
        $this->privateParam = (array)json_decode($privateJson, true);
    }

    private function needCheckLogin()
    {
        $uri = trim(ArrayHelper::getValue($_SERVER, 'REQUEST_URI'));
        $queryString = trim(ArrayHelper::getValue($_SERVER, 'QUERY_STRING'));
        $queryString && $uri = str_replace('?' . $queryString, '', $uri);
//        $whiteList = [
//            ''//白名单
//        ];
//        return !in_array($uri, $whiteList);//true - 需要检查登录  false - 不需要检查
        return false;
    }

    private function checkLogin()
    {
        if ($this->needCheckLogin()) {
            $uid = ArrayHelper::getValue($this->publicParam, 'uid');
            $token = ArrayHelper::getValue($this->publicParam, 'token');
            // "token": "be025c89d4c03acd7046c925e25bd337",
            // "uid": 89220
            $userInfo = Yii::$app->cache->get("token:$token");
            if (!$userInfo) {
                //缓存无效 去用户中心查询
                if (!UcenterLogic::instance()->checkLogin($uid, $token)) {
                    $this->outPutResult(1002);//未登录
                } else {
                    $userInfo = [];
                    Yii::$app->cache->set("token:$token", $userInfo, 600);//缓存有效时间10分钟
                }
            }
        }
    }


    /**
     * 格式分页参数
     * @param $intPage
     * @param $intPageSize
     * @param $intTotal
     * @return array
     */
    protected function formatPages($intPage, $intPageSize, $intTotal)
    {
        return [
            'currentPage' => intval($intPage),
            'pageSize' => intval($intPageSize),
            'totalCount' => intval($intTotal),
        ];
    }


    /**
     * @param int $code 错误码，0 表示成功， 否则失败，api接口的所有错误码都需要配置进来，便于接口调试
     * @param string $errMsg 错误提示，如果没传则以错误码表中的提示输出
     * @param null $data 接口需要返回的数据
     */
    protected function outPutResult($code, $errMsg = '', $data = null)
    {
        $arrCodeConf = $this->outPutCodeConfig();
        if (!isset($arrCodeConf[$code])) {
            $code = 1000;
            $errMsg = $arrCodeConf[$code];
        } else if (empty($errMsg)) {
            $errMsg = $arrCodeConf[$code];
        }
        $arrOut = [
            'code' => $code,
            'errMsg' => $errMsg,
            'data' => $data
        ];

        header('Content-type: application/json');
        echo json_encode($arrOut, JSON_UNESCAPED_UNICODE);
        exit;
    }

    /**
     * 配置错误码
     */
    private function outPutCodeConfig()
    {
        return [
            0 => '成功',
            1000 => '程序错误，输出的code不存在',
            1001 => '参数格式错误',
            1002 => '未登录',
            1003 => '登录token已失效，请重新登录',
            //........
        ];
    }
}

